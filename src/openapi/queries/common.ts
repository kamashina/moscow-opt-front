// generated with @7nohe/openapi-react-query-codegen@1.6.2 

import { UseQueryResult } from "@tanstack/react-query";
import { AuthService, BannersService, BasketService, BrandsService, CardsService, CategoriesService, CompaniesService, DaDataService, FavoritesService, FileUploadService, FiltersService, GeolocationService, ItemService, MeilisearchService, ShopService, UsersService } from "../requests/services.gen";
export type AuthServiceGetSmsTimerDefaultResponse = Awaited<ReturnType<typeof AuthService.getSmsTimer>>;
export type AuthServiceGetSmsTimerQueryResult<TData = AuthServiceGetSmsTimerDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useAuthServiceGetSmsTimerKey = "AuthServiceGetSmsTimer";
export const UseAuthServiceGetSmsTimerKeyFn = ({ phone }: {
  phone: string;
}, queryKey?: Array<unknown>) => [useAuthServiceGetSmsTimerKey, ...(queryKey ?? [{ phone }])];
export type UsersServiceFindAllDefaultResponse = Awaited<ReturnType<typeof UsersService.findAll>>;
export type UsersServiceFindAllQueryResult<TData = UsersServiceFindAllDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useUsersServiceFindAllKey = "UsersServiceFindAll";
export const UseUsersServiceFindAllKeyFn = (queryKey?: Array<unknown>) => [useUsersServiceFindAllKey, ...(queryKey ?? [])];
export type UsersServiceGetMeDefaultResponse = Awaited<ReturnType<typeof UsersService.getMe>>;
export type UsersServiceGetMeQueryResult<TData = UsersServiceGetMeDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useUsersServiceGetMeKey = "UsersServiceGetMe";
export const UseUsersServiceGetMeKeyFn = (queryKey?: Array<unknown>) => [useUsersServiceGetMeKey, ...(queryKey ?? [])];
export type UsersServiceGetByIdDefaultResponse = Awaited<ReturnType<typeof UsersService.getById>>;
export type UsersServiceGetByIdQueryResult<TData = UsersServiceGetByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useUsersServiceGetByIdKey = "UsersServiceGetById";
export const UseUsersServiceGetByIdKeyFn = ({ id }: {
  id: number;
}, queryKey?: Array<unknown>) => [useUsersServiceGetByIdKey, ...(queryKey ?? [{ id }])];
export type CompaniesServiceGetAllCompaniesDefaultResponse = Awaited<ReturnType<typeof CompaniesService.getAllCompanies>>;
export type CompaniesServiceGetAllCompaniesQueryResult<TData = CompaniesServiceGetAllCompaniesDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useCompaniesServiceGetAllCompaniesKey = "CompaniesServiceGetAllCompanies";
export const UseCompaniesServiceGetAllCompaniesKeyFn = (queryKey?: Array<unknown>) => [useCompaniesServiceGetAllCompaniesKey, ...(queryKey ?? [])];
export type CompaniesServiceGetMyCompanyDefaultResponse = Awaited<ReturnType<typeof CompaniesService.getMyCompany>>;
export type CompaniesServiceGetMyCompanyQueryResult<TData = CompaniesServiceGetMyCompanyDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useCompaniesServiceGetMyCompanyKey = "CompaniesServiceGetMyCompany";
export const UseCompaniesServiceGetMyCompanyKeyFn = (queryKey?: Array<unknown>) => [useCompaniesServiceGetMyCompanyKey, ...(queryKey ?? [])];
export type FiltersServiceGetFiltersBySubCategoryIdDefaultResponse = Awaited<ReturnType<typeof FiltersService.getFiltersBySubCategoryId>>;
export type FiltersServiceGetFiltersBySubCategoryIdQueryResult<TData = FiltersServiceGetFiltersBySubCategoryIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useFiltersServiceGetFiltersBySubCategoryIdKey = "FiltersServiceGetFiltersBySubCategoryId";
export const UseFiltersServiceGetFiltersBySubCategoryIdKeyFn = ({ subCategoryId }: {
  subCategoryId: number;
}, queryKey?: Array<unknown>) => [useFiltersServiceGetFiltersBySubCategoryIdKey, ...(queryKey ?? [{ subCategoryId }])];
export type ShopServiceGetMyShopDefaultResponse = Awaited<ReturnType<typeof ShopService.getMyShop>>;
export type ShopServiceGetMyShopQueryResult<TData = ShopServiceGetMyShopDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useShopServiceGetMyShopKey = "ShopServiceGetMyShop";
export const UseShopServiceGetMyShopKeyFn = (queryKey?: Array<unknown>) => [useShopServiceGetMyShopKey, ...(queryKey ?? [])];
export type ShopServiceGetAllShopsDefaultResponse = Awaited<ReturnType<typeof ShopService.getAllShops>>;
export type ShopServiceGetAllShopsQueryResult<TData = ShopServiceGetAllShopsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useShopServiceGetAllShopsKey = "ShopServiceGetAllShops";
export const UseShopServiceGetAllShopsKeyFn = (queryKey?: Array<unknown>) => [useShopServiceGetAllShopsKey, ...(queryKey ?? [])];
export type CategoriesServiceGetAllCategoriesDefaultResponse = Awaited<ReturnType<typeof CategoriesService.getAllCategories>>;
export type CategoriesServiceGetAllCategoriesQueryResult<TData = CategoriesServiceGetAllCategoriesDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useCategoriesServiceGetAllCategoriesKey = "CategoriesServiceGetAllCategories";
export const UseCategoriesServiceGetAllCategoriesKeyFn = ({ isPopular }: {
  isPopular?: boolean;
} = {}, queryKey?: Array<unknown>) => [useCategoriesServiceGetAllCategoriesKey, ...(queryKey ?? [{ isPopular }])];
export type CategoriesServiceGetPopularCategoriesDefaultResponse = Awaited<ReturnType<typeof CategoriesService.getPopularCategories>>;
export type CategoriesServiceGetPopularCategoriesQueryResult<TData = CategoriesServiceGetPopularCategoriesDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useCategoriesServiceGetPopularCategoriesKey = "CategoriesServiceGetPopularCategories";
export const UseCategoriesServiceGetPopularCategoriesKeyFn = (queryKey?: Array<unknown>) => [useCategoriesServiceGetPopularCategoriesKey, ...(queryKey ?? [])];
export type CategoriesServiceGetSubCategoryByIdDefaultResponse = Awaited<ReturnType<typeof CategoriesService.getSubCategoryById>>;
export type CategoriesServiceGetSubCategoryByIdQueryResult<TData = CategoriesServiceGetSubCategoryByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useCategoriesServiceGetSubCategoryByIdKey = "CategoriesServiceGetSubCategoryById";
export const UseCategoriesServiceGetSubCategoryByIdKeyFn = ({ id }: {
  id: number;
}, queryKey?: Array<unknown>) => [useCategoriesServiceGetSubCategoryByIdKey, ...(queryKey ?? [{ id }])];
export type ItemServiceGetAllItemsDefaultResponse = Awaited<ReturnType<typeof ItemService.getAllItems>>;
export type ItemServiceGetAllItemsQueryResult<TData = ItemServiceGetAllItemsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useItemServiceGetAllItemsKey = "ItemServiceGetAllItems";
export const UseItemServiceGetAllItemsKeyFn = (queryKey?: Array<unknown>) => [useItemServiceGetAllItemsKey, ...(queryKey ?? [])];
export type ItemServiceGetByIdDefaultResponse = Awaited<ReturnType<typeof ItemService.getById>>;
export type ItemServiceGetByIdQueryResult<TData = ItemServiceGetByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useItemServiceGetByIdKey = "ItemServiceGetById";
export const UseItemServiceGetByIdKeyFn = (queryKey?: Array<unknown>) => [useItemServiceGetByIdKey, ...(queryKey ?? [])];
export type MeilisearchServiceSearchDefaultResponse = Awaited<ReturnType<typeof MeilisearchService.search>>;
export type MeilisearchServiceSearchQueryResult<TData = MeilisearchServiceSearchDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useMeilisearchServiceSearchKey = "MeilisearchServiceSearch";
export const UseMeilisearchServiceSearchKeyFn = ({ query }: {
  query?: string;
} = {}, queryKey?: Array<unknown>) => [useMeilisearchServiceSearchKey, ...(queryKey ?? [{ query }])];
export type BasketServiceGetMyBasketDefaultResponse = Awaited<ReturnType<typeof BasketService.getMyBasket>>;
export type BasketServiceGetMyBasketQueryResult<TData = BasketServiceGetMyBasketDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBasketServiceGetMyBasketKey = "BasketServiceGetMyBasket";
export const UseBasketServiceGetMyBasketKeyFn = (queryKey?: Array<unknown>) => [useBasketServiceGetMyBasketKey, ...(queryKey ?? [])];
export type BasketServiceGetTotalItemsInBasketDefaultResponse = Awaited<ReturnType<typeof BasketService.getTotalItemsInBasket>>;
export type BasketServiceGetTotalItemsInBasketQueryResult<TData = BasketServiceGetTotalItemsInBasketDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBasketServiceGetTotalItemsInBasketKey = "BasketServiceGetTotalItemsInBasket";
export const UseBasketServiceGetTotalItemsInBasketKeyFn = (queryKey?: Array<unknown>) => [useBasketServiceGetTotalItemsInBasketKey, ...(queryKey ?? [])];
export type DaDataServiceGetPartyDefaultResponse = Awaited<ReturnType<typeof DaDataService.getParty>>;
export type DaDataServiceGetPartyQueryResult<TData = DaDataServiceGetPartyDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useDaDataServiceGetPartyKey = "DaDataServiceGetParty";
export const UseDaDataServiceGetPartyKeyFn = ({ query }: {
  query: string;
}, queryKey?: Array<unknown>) => [useDaDataServiceGetPartyKey, ...(queryKey ?? [{ query }])];
export type CardsServiceGetAllCardsDefaultResponse = Awaited<ReturnType<typeof CardsService.getAllCards>>;
export type CardsServiceGetAllCardsQueryResult<TData = CardsServiceGetAllCardsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useCardsServiceGetAllCardsKey = "CardsServiceGetAllCards";
export const UseCardsServiceGetAllCardsKeyFn = ({ q }: {
  q?: string;
} = {}, queryKey?: Array<unknown>) => [useCardsServiceGetAllCardsKey, ...(queryKey ?? [{ q }])];
export type BrandsServiceGetBrandsDefaultResponse = Awaited<ReturnType<typeof BrandsService.getBrands>>;
export type BrandsServiceGetBrandsQueryResult<TData = BrandsServiceGetBrandsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBrandsServiceGetBrandsKey = "BrandsServiceGetBrands";
export const UseBrandsServiceGetBrandsKeyFn = (queryKey?: Array<unknown>) => [useBrandsServiceGetBrandsKey, ...(queryKey ?? [])];
export type BrandsServiceGetBrandByIdDefaultResponse = Awaited<ReturnType<typeof BrandsService.getBrandById>>;
export type BrandsServiceGetBrandByIdQueryResult<TData = BrandsServiceGetBrandByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBrandsServiceGetBrandByIdKey = "BrandsServiceGetBrandById";
export const UseBrandsServiceGetBrandByIdKeyFn = ({ id }: {
  id: number;
}, queryKey?: Array<unknown>) => [useBrandsServiceGetBrandByIdKey, ...(queryKey ?? [{ id }])];
export type GeolocationServiceGetCityByCoordinatesDefaultResponse = Awaited<ReturnType<typeof GeolocationService.getCityByCoordinates>>;
export type GeolocationServiceGetCityByCoordinatesQueryResult<TData = GeolocationServiceGetCityByCoordinatesDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useGeolocationServiceGetCityByCoordinatesKey = "GeolocationServiceGetCityByCoordinates";
export const UseGeolocationServiceGetCityByCoordinatesKeyFn = ({ lat, lon }: {
  lat: number;
  lon: number;
}, queryKey?: Array<unknown>) => [useGeolocationServiceGetCityByCoordinatesKey, ...(queryKey ?? [{ lat, lon }])];
export type BannersServiceGetBannersDefaultResponse = Awaited<ReturnType<typeof BannersService.getBanners>>;
export type BannersServiceGetBannersQueryResult<TData = BannersServiceGetBannersDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBannersServiceGetBannersKey = "BannersServiceGetBanners";
export const UseBannersServiceGetBannersKeyFn = (queryKey?: Array<unknown>) => [useBannersServiceGetBannersKey, ...(queryKey ?? [])];
export type FavoritesServiceGetFavoritesDefaultResponse = Awaited<ReturnType<typeof FavoritesService.getFavorites>>;
export type FavoritesServiceGetFavoritesQueryResult<TData = FavoritesServiceGetFavoritesDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useFavoritesServiceGetFavoritesKey = "FavoritesServiceGetFavorites";
export const UseFavoritesServiceGetFavoritesKeyFn = (queryKey?: Array<unknown>) => [useFavoritesServiceGetFavoritesKey, ...(queryKey ?? [])];
export type AuthServiceRegisterSmsMutationResult = Awaited<ReturnType<typeof AuthService.registerSms>>;
export type AuthServiceLoginSmsMutationResult = Awaited<ReturnType<typeof AuthService.loginSms>>;
export type AuthServiceVerifyCodeMutationResult = Awaited<ReturnType<typeof AuthService.verifyCode>>;
export type AuthServiceRefreshTokenMutationResult = Awaited<ReturnType<typeof AuthService.refreshToken>>;
export type AuthServiceLogoutMutationResult = Awaited<ReturnType<typeof AuthService.logout>>;
export type CompaniesServiceCreateMutationResult = Awaited<ReturnType<typeof CompaniesService.create>>;
export type ShopServiceCreateShopMutationResult = Awaited<ReturnType<typeof ShopService.createShop>>;
export type CategoriesServiceCreateCategoryMutationResult = Awaited<ReturnType<typeof CategoriesService.createCategory>>;
export type CategoriesServiceCreateSubCategoryMutationResult = Awaited<ReturnType<typeof CategoriesService.createSubCategory>>;
export type ItemServiceCreateItemMutationResult = Awaited<ReturnType<typeof ItemService.createItem>>;
export type FileUploadServiceUploadItemsImagesMutationResult = Awaited<ReturnType<typeof FileUploadService.uploadItemsImages>>;
export type FileUploadServiceUploadBannerMutationResult = Awaited<ReturnType<typeof FileUploadService.uploadBanner>>;
export type FileUploadServiceUploadShopImagesMutationResult = Awaited<ReturnType<typeof FileUploadService.uploadShopImages>>;
export type FileUploadServiceUploadItemsexcelMutationResult = Awaited<ReturnType<typeof FileUploadService.uploadItemsexcel>>;
export type BasketServiceAddItemToBasketMutationResult = Awaited<ReturnType<typeof BasketService.addItemToBasket>>;
export type BrandsServiceCreateBrandMutationResult = Awaited<ReturnType<typeof BrandsService.createBrand>>;
export type FavoritesServiceChangeFavoriteMutationResult = Awaited<ReturnType<typeof FavoritesService.changeFavorite>>;
export type UsersServiceChangeUserRoleMutationResult = Awaited<ReturnType<typeof UsersService.changeUserRole>>;
export type ShopServiceUpdateShopMutationResult = Awaited<ReturnType<typeof ShopService.updateShop>>;
export type ItemServiceUpdateItemMutationResult = Awaited<ReturnType<typeof ItemService.updateItem>>;
export type CompaniesServiceDeleteMyCompanyMutationResult = Awaited<ReturnType<typeof CompaniesService.deleteMyCompany>>;
export type CategoriesServiceDeleteAllCategoriesMutationResult = Awaited<ReturnType<typeof CategoriesService.deleteAllCategories>>;
export type CategoriesServiceDeleteCategoryByIdMutationResult = Awaited<ReturnType<typeof CategoriesService.deleteCategoryById>>;
export type ItemServiceDeleteByIdMutationResult = Awaited<ReturnType<typeof ItemService.deleteById>>;
export type BrandsServiceDeleteBrandMutationResult = Awaited<ReturnType<typeof BrandsService.deleteBrand>>;
