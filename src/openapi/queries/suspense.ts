// generated with @7nohe/openapi-react-query-codegen@1.6.2 

import { UseQueryOptions, useSuspenseQuery } from "@tanstack/react-query";
import { AuthService, BannersService, BasketService, BrandsService, CardsService, CategoriesService, CompaniesService, DaDataService, FavoritesService, FiltersService, GeolocationService, ItemService, MeilisearchService, ShopService, UsersService } from "../requests/services.gen";
import * as Common from "./common";
export const useAuthServiceGetSmsTimerSuspense = <TData = Common.AuthServiceGetSmsTimerDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ phone }: {
  phone: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseAuthServiceGetSmsTimerKeyFn({ phone }, queryKey), queryFn: () => AuthService.getSmsTimer({ phone }) as TData, ...options });
export const useUsersServiceFindAllSuspense = <TData = Common.UsersServiceFindAllDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseUsersServiceFindAllKeyFn(queryKey), queryFn: () => UsersService.findAll() as TData, ...options });
export const useUsersServiceGetMeSuspense = <TData = Common.UsersServiceGetMeDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseUsersServiceGetMeKeyFn(queryKey), queryFn: () => UsersService.getMe() as TData, ...options });
export const useUsersServiceGetByIdSuspense = <TData = Common.UsersServiceGetByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
  id: number;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseUsersServiceGetByIdKeyFn({ id }, queryKey), queryFn: () => UsersService.getById({ id }) as TData, ...options });
export const useCompaniesServiceGetAllCompaniesSuspense = <TData = Common.CompaniesServiceGetAllCompaniesDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseCompaniesServiceGetAllCompaniesKeyFn(queryKey), queryFn: () => CompaniesService.getAllCompanies() as TData, ...options });
export const useCompaniesServiceGetMyCompanySuspense = <TData = Common.CompaniesServiceGetMyCompanyDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseCompaniesServiceGetMyCompanyKeyFn(queryKey), queryFn: () => CompaniesService.getMyCompany() as TData, ...options });
export const useFiltersServiceGetFiltersBySubCategoryIdSuspense = <TData = Common.FiltersServiceGetFiltersBySubCategoryIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ subCategoryId }: {
  subCategoryId: number;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseFiltersServiceGetFiltersBySubCategoryIdKeyFn({ subCategoryId }, queryKey), queryFn: () => FiltersService.getFiltersBySubCategoryId({ subCategoryId }) as TData, ...options });
export const useShopServiceGetMyShopSuspense = <TData = Common.ShopServiceGetMyShopDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseShopServiceGetMyShopKeyFn(queryKey), queryFn: () => ShopService.getMyShop() as TData, ...options });
export const useShopServiceGetAllShopsSuspense = <TData = Common.ShopServiceGetAllShopsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseShopServiceGetAllShopsKeyFn(queryKey), queryFn: () => ShopService.getAllShops() as TData, ...options });
export const useCategoriesServiceGetAllCategoriesSuspense = <TData = Common.CategoriesServiceGetAllCategoriesDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ isPopular }: {
  isPopular?: boolean;
} = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseCategoriesServiceGetAllCategoriesKeyFn({ isPopular }, queryKey), queryFn: () => CategoriesService.getAllCategories({ isPopular }) as TData, ...options });
export const useCategoriesServiceGetPopularCategoriesSuspense = <TData = Common.CategoriesServiceGetPopularCategoriesDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseCategoriesServiceGetPopularCategoriesKeyFn(queryKey), queryFn: () => CategoriesService.getPopularCategories() as TData, ...options });
export const useCategoriesServiceGetSubCategoryByIdSuspense = <TData = Common.CategoriesServiceGetSubCategoryByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
  id: number;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseCategoriesServiceGetSubCategoryByIdKeyFn({ id }, queryKey), queryFn: () => CategoriesService.getSubCategoryById({ id }) as TData, ...options });
export const useItemServiceGetAllItemsSuspense = <TData = Common.ItemServiceGetAllItemsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseItemServiceGetAllItemsKeyFn(queryKey), queryFn: () => ItemService.getAllItems() as TData, ...options });
export const useItemServiceGetItemsByMyShopSuspense = <TData = Common.ItemServiceGetItemsByMyShopDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ limit, offset, q, status }: {
  limit?: number;
  offset?: number;
  q?: string;
  status?: "all" | "active" | "reject" | "draft";
} = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseItemServiceGetItemsByMyShopKeyFn({ limit, offset, q, status }, queryKey), queryFn: () => ItemService.getItemsByMyShop({ limit, offset, q, status }) as TData, ...options });
export const useItemServiceGetItemsByIdsSuspense = <TData = Common.ItemServiceGetItemsByIdsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ ids }: {
  ids: number[];
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseItemServiceGetItemsByIdsKeyFn({ ids }, queryKey), queryFn: () => ItemService.getItemsByIds({ ids }) as TData, ...options });
export const useItemServiceGetByIdSuspense = <TData = Common.ItemServiceGetByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseItemServiceGetByIdKeyFn(queryKey), queryFn: () => ItemService.getById() as TData, ...options });
export const useMeilisearchServiceSearchSuspense = <TData = Common.MeilisearchServiceSearchDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ query }: {
  query?: string;
} = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseMeilisearchServiceSearchKeyFn({ query }, queryKey), queryFn: () => MeilisearchService.search({ query }) as TData, ...options });
export const useBasketServiceGetMyBasketSuspense = <TData = Common.BasketServiceGetMyBasketDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseBasketServiceGetMyBasketKeyFn(queryKey), queryFn: () => BasketService.getMyBasket() as TData, ...options });
export const useBasketServiceGetTotalItemsInBasketSuspense = <TData = Common.BasketServiceGetTotalItemsInBasketDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseBasketServiceGetTotalItemsInBasketKeyFn(queryKey), queryFn: () => BasketService.getTotalItemsInBasket() as TData, ...options });
export const useDaDataServiceGetPartySuspense = <TData = Common.DaDataServiceGetPartyDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ inn }: {
  inn: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseDaDataServiceGetPartyKeyFn({ inn }, queryKey), queryFn: () => DaDataService.getParty({ inn }) as TData, ...options });
export const useDaDataServiceGetAddressSuspense = <TData = Common.DaDataServiceGetAddressDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ q }: {
  q: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseDaDataServiceGetAddressKeyFn({ q }, queryKey), queryFn: () => DaDataService.getAddress({ q }) as TData, ...options });
export const useCardsServiceGetAllCardsSuspense = <TData = Common.CardsServiceGetAllCardsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ q, status }: {
  q?: string;
  status?: "active" | "reject" | "draft" | "in_confirmation";
} = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseCardsServiceGetAllCardsKeyFn({ q, status }, queryKey), queryFn: () => CardsService.getAllCards({ q, status }) as TData, ...options });
export const useCardsServiceGetNewCardsSuspense = <TData = Common.CardsServiceGetNewCardsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseCardsServiceGetNewCardsKeyFn(queryKey), queryFn: () => CardsService.getNewCards() as TData, ...options });
export const useBrandsServiceGetBrandsSuspense = <TData = Common.BrandsServiceGetBrandsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseBrandsServiceGetBrandsKeyFn(queryKey), queryFn: () => BrandsService.getBrands() as TData, ...options });
export const useBrandsServiceGetBrandByIdSuspense = <TData = Common.BrandsServiceGetBrandByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
  id: number;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseBrandsServiceGetBrandByIdKeyFn({ id }, queryKey), queryFn: () => BrandsService.getBrandById({ id }) as TData, ...options });
export const useGeolocationServiceGetCityByCoordinatesSuspense = <TData = Common.GeolocationServiceGetCityByCoordinatesDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ lat, lon }: {
  lat: number;
  lon: number;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGeolocationServiceGetCityByCoordinatesKeyFn({ lat, lon }, queryKey), queryFn: () => GeolocationService.getCityByCoordinates({ lat, lon }) as TData, ...options });
export const useBannersServiceGetBannersSuspense = <TData = Common.BannersServiceGetBannersDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseBannersServiceGetBannersKeyFn(queryKey), queryFn: () => BannersService.getBanners() as TData, ...options });
export const useFavoritesServiceGetFavoritesSuspense = <TData = Common.FavoritesServiceGetFavoritesDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseFavoritesServiceGetFavoritesKeyFn(queryKey), queryFn: () => FavoritesService.getFavorites() as TData, ...options });
