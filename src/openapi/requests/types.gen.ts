// This file is auto-generated by @hey-api/openapi-ts

export type RegisterUserDto = {
    email: string;
    password: string;
    phone: string;
    full_name: string;
};

export type GetSmsTimerResponse = {
    readonly expiresIn: number;
    readonly message: string;
};

export type SendSmsDto = {
    phone: string;
};

export type VerifyCodeDto = {
    phone: string;
    code: string;
};

export type companyStatus = 'pending' | 'approved' | 'rejected' | 'blocked';

export type VerifyCompanyResponse = {
    id: number;
    name: string;
    status: companyStatus;
};

export type AuthResponse = {
    access_token: string;
    refresh_token: string;
    id: number;
    full_name: string;
    photo: string;
    role: string;
    email: string;
    phone: string;
    company: VerifyCompanyResponse;
};

export type RefreshReponse = {
    access_token: string;
    refresh_token: string;
};

export type Role = 'user' | 'seller';

export type rate = 'no' | 'low' | 'medium' | 'hight';

export type ShopEntityToken = {
    rate: rate;
    id: number;
    name: string;
};

export type UserEntityWithoutPassword = {
    role: Role;
    id: number;
    full_name: string;
    email: string;
    phone: string;
    photo: string | null;
    shop?: ShopEntityToken;
    companies?: {
        [key: string]: unknown;
    };
};

export type UsersPatchDto = {
    role: Role;
    photo: string;
    email: string;
    phone: string;
    full_name: string;
};

export type type = 'INDIVIDUAL' | 'LEGAL';

export type taxation = 'IE_without_VAT' | 'IE_with_VAT' | 'IE_Professional_Income_Tax' | 'self_employed' | 'company_with_VAT' | 'company_without_VAT';

export type CompaniesDto = {
    type: type;
    taxation: taxation;
    management_name: string;
    full_with_opf: string;
    name: string;
    itn: string;
    psrnsp: string;
    kpp: string;
};

export type ShopEntityMinInfo = {
    rate: rate;
    address: string;
    logo: string;
    name: string;
    description: string;
    id: number;
};

export type CompaniesResponse = {
    id: number;
    name: string;
    itn: string;
    psrnsp: string;
    kpp: string;
    type: type;
    taxation: taxation;
    shop?: ShopEntityMinInfo;
    status: companyStatus;
};

export type ShopEntity = {
    rate: rate;
    address: string;
    description: string;
    id: number;
    logo: string;
    name: string;
    company: {
        id: number;
        name: string;
    };
};

export type CreateShopDto = {
    rate: rate;
    name: string;
    description?: string;
    address: string;
    logo?: string;
    banner?: string;
};

export type UpdateShopDto = {
    name: string;
    description?: string;
    address: string;
    logo?: string;
};

export type SubCategoryMinResponse = {
    id: number;
    name: string;
    seo: string;
};

export type CategoryResponse = {
    name: string;
    logo: string;
    seo: string;
    isPopular: boolean;
    id: number;
    parentId?: number;
    subCategories: Array<SubCategoryMinResponse>;
};

export type PopularCategoriesResponse = {
    name: string;
    logo: string;
    seo: string;
    id: number;
};

export type CreateCategoryDto = {
    name: string;
    seo: string;
};

export type FieldsSchemaDto = {
    properties: {
        [key: string]: {
            type?: string;
            enum?: Array<(string)> | null;
        };
    };
    required: Array<(string)>;
};

export type CreateSubCategoryDto = {
    fieldsSchema?: FieldsSchemaDto;
    name: string;
    excelTemplatePath: string;
    seo: string;
};

export type FieldsSchema = {
    key: string;
    type: string;
};

export type SubCategoryResponse = {
    parentId: number;
    id: number;
    name: string;
    excelTemplatePath: string;
    fieldsSchema: Array<FieldsSchema>;
    seo: string;
};

export type ExportExcelRequestDto = {
    /**
     * Данные для экспорта
     */
    data: Array<{
        [key: string]: (string);
    }>;
};

export type CreateItemDto = {
    name: string;
    fields: {
        [key: string]: unknown;
    };
    countryOfOrigin: string;
    article: number;
    brand: string;
    box: Array<{
        [key: string]: unknown;
    }>;
    price: number;
    sellerArticle: string;
    images: Array<(string)>;
};

export type BasketOptions = {
    [key: string]: unknown;
};

export type itemStatus = 'draft' | 'active' | 'reject';

export type ItemsEntityMinInfo = {
    description: string;
    countryOfOrigin: string;
    basketOptions: Array<BasketOptions>;
    article: number;
    cardId: number;
    id: number;
    rating: number;
    price: number;
    discountStepQuantity: number;
    discountPerStep: number;
    maxDiscount: number;
    name: string;
    brand: string;
    sellerArticle: string;
    images: Array<(string)>;
    status: itemStatus;
    createdAt: string;
};

export type ItemsEntityMinInfoByShop = {
    description: string;
    countryOfOrigin: string;
    article: number;
    cardId: number;
    id: number;
    rating: number;
    price: number;
    discountStepQuantity: number;
    discountPerStep: number;
    maxDiscount: number;
    name: string;
    brand: string;
    sellerArticle: string;
    images: Array<(string)>;
    status: itemStatus;
    createdAt: string;
};

export type ItemsEntityBulkData = {
    tableData?: {
        [key: string]: unknown;
    };
    id: number;
    status: itemStatus;
};

export type UpdateItemDto = {
    description: string;
    basketOptions: Array<{
        [key: string]: unknown;
    }>;
    seo: string;
    name: string;
    fields: {
        [key: string]: unknown;
    };
    countryOfOrigin: string;
    article: number;
    brand: string;
    box: Array<{
        [key: string]: unknown;
    }>;
    images: Array<(string)>;
};

export type SuggestionType = 'card' | 'category' | 'subCategory' | 'shop';

export type SearchEntityResponse = {
    id: number;
    name: string;
    suggestionType: SuggestionType;
};

export type FilesResponse = {
    message: string;
    paths: Array<(string)>;
};

export type FileResponse = {
    message: string;
    imagePath: string;
};

export type ExportExcelResponse = {
    fileName: string;
    fileData: string;
};

export type OrganizationResponse = {
    type: type;
    name: string;
    itn: string;
    psrnsp: string;
    kpp: string | null;
};

export type AddressResponse = {
    result: string;
    postal_code: string;
    region_with_type: string;
    region: string;
};

export type BoxResponseDto = {
    type: 'box_single' | 'box_characteristics';
    /**
     * Опции коробки, структура зависит от типа box
     */
    options: {
    name?: string;
    quantity?: string;
} | {
    name?: string;
    fields?: Array<{
        name?: string;
        quantity?: string;
    }>;
};
};

export type type2 = 'box_single' | 'box_characteristics';

export type CardItemResponse = {
    id: string;
    name: string;
    description: string;
    images: Array<(string)>;
    countryOfOrigin: string;
    article: number;
    brand: string;
    box: (BoxResponseDto) | null;
    price: number;
    rating: number;
};

export type CardShopResponse = {
    id: string;
    name: string;
};

export type CardResponse = {
    id: number;
    preview: CardItemResponse;
    shop: CardShopResponse;
    isFavorite: boolean;
};

export type CreateBrandDto = {
    name: string;
};

export type BannerEntities = {
    id: number;
    imagePath: string;
    routePath: string;
    seo: string;
};

export type RegisterSmsData = {
    requestBody: RegisterUserDto;
};

export type RegisterSmsResponse = GetSmsTimerResponse | {
    [key: string]: unknown;
};

export type LoginSmsData = {
    requestBody: SendSmsDto;
};

export type LoginSmsResponse = GetSmsTimerResponse | {
    [key: string]: unknown;
};

export type GetSmsTimerData = {
    phone: string;
};

export type GetSmsTimerResponse2 = GetSmsTimerResponse;

export type VerifyCodeData = {
    requestBody: VerifyCodeDto;
};

export type VerifyCodeResponse = AuthResponse;

export type RefreshTokenResponse = RefreshReponse;

export type LogoutResponse = unknown;

export type FindAllResponse = unknown;

export type ChangeUserRoleData = {
    requestBody: UsersPatchDto;
};

export type ChangeUserRoleResponse = UserEntityWithoutPassword;

export type GetMeResponse = UserEntityWithoutPassword;

export type GetByIdData = {
    id: number;
};

export type GetByIdResponse = UserEntityWithoutPassword;

export type CreateData = {
    requestBody: CompaniesDto;
};

export type CreateResponse = unknown;

export type GetAllCompaniesResponse = CompaniesResponse;

export type DeleteMyCompanyResponse = CompaniesResponse;

export type GetMyCompanyResponse = CompaniesResponse;

export type GetFiltersBySubCategoryIdData = {
    subCategoryId: number;
};

export type GetFiltersBySubCategoryIdResponse = unknown;

export type GetMyShopResponse = ShopEntity;

export type GetAllShopsResponse = Array<ShopEntityMinInfo>;

export type CreateShopData = {
    requestBody: CreateShopDto;
};

export type CreateShopResponse = unknown;

export type UpdateShopData = {
    requestBody: UpdateShopDto;
};

export type UpdateShopResponse = unknown;

export type GetAllCategoriesData = {
    isPopular?: boolean;
};

export type GetAllCategoriesResponse = Array<CategoryResponse>;

export type CreateCategoryData = {
    requestBody: CreateCategoryDto;
};

export type CreateCategoryResponse = unknown;

export type DeleteAllCategoriesResponse = {
    [key: string]: unknown;
};

export type GetPopularCategoriesResponse = Array<PopularCategoriesResponse>;

export type CreateSubCategoryData = {
    parentId: number;
    requestBody: CreateSubCategoryDto;
};

export type CreateSubCategoryResponse = unknown;

export type GetSubCategoryByIdData = {
    id: number;
};

export type GetSubCategoryByIdResponse = SubCategoryResponse;

export type DeleteCategoryByIdData = {
    id: number;
};

export type DeleteCategoryByIdResponse = unknown;

export type CreateItemsBulkData = {
    requestBody: ExportExcelRequestDto;
    subCategoryId: number;
};

export type CreateItemsBulkResponse = {
    [key: string]: unknown;
};

export type CreateItemData = {
    brandId: number;
    cardId: number;
    requestBody: CreateItemDto;
    subCategoryId: number;
};

export type CreateItemResponse = unknown;

export type GetAllItemsResponse = Array<ItemsEntityMinInfo>;

export type GetItemsByMyShopData = {
    limit?: number;
    offset?: number;
    q?: string;
    status?: 'all' | 'active' | 'reject' | 'draft';
};

export type GetItemsByMyShopResponse = Array<ItemsEntityMinInfoByShop>;

export type GetItemsByIdsData = {
    ids: Array<(number)>;
};

export type GetItemsByIdsResponse = Array<ItemsEntityBulkData>;

export type UpdateItemData = {
    id: number;
    requestBody: UpdateItemDto;
};

export type UpdateItemResponse = ItemsEntityMinInfo;

export type DeleteByIdData = {
    id: number;
};

export type DeleteByIdResponse = unknown;

export type SearchData = {
    query?: string;
};

export type SearchResponse = Array<SearchEntityResponse>;

export type UploadItemsMediaData = {
    formData: {
        media?: Array<((Blob | File))>;
    };
};

export type UploadItemsMediaResponse = FilesResponse;

export type UploadBannerData = {
    formData: {
        file?: (Blob | File);
    };
};

export type UploadBannerResponse = unknown;

export type UploadShopBannerData = {
    formData: {
        file?: (Blob | File);
    };
};

export type UploadShopBannerResponse = FileResponse;

export type UploadShopImagesData = {
    formData: {
        image?: (Blob | File);
    };
};

export type UploadShopImagesResponse = FileResponse;

export type ImportItemsExcelData = {
    formData: {
        file?: (Blob | File);
    };
    subCategoryId: number;
};

export type ImportItemsExcelResponse = Array<{
    [key: string]: unknown;
}>;

export type ExportItemsExcelData = {
    requestBody: ExportExcelRequestDto;
};

export type ExportItemsExcelResponse = ExportExcelResponse;

export type GetMyBasketResponse = {
    [key: string]: unknown;
};

export type GetTotalItemsInBasketResponse = number;

export type AddItemToBasketData = {
    itemId: number;
};

export type AddItemToBasketResponse = {
    [key: string]: unknown;
};

export type GetPartyData = {
    inn: string;
};

export type GetPartyResponse = Array<OrganizationResponse>;

export type GetAddressData = {
    q: string;
};

export type GetAddressResponse = Array<AddressResponse>;

export type GetAllCardsData = {
    q?: string;
    status?: 'draft' | 'active' | 'reject' | 'in_confirmation';
};

export type GetAllCardsResponse = Array<CardResponse>;

export type GetNewCardsResponse = Array<CardResponse>;

export type CreateBrandData = {
    requestBody: CreateBrandDto;
};

export type CreateBrandResponse = unknown;

export type GetBrandsResponse = unknown;

export type DeleteBrandResponse = unknown;

export type GetBrandByIdData = {
    id: number;
};

export type GetBrandByIdResponse = unknown;

export type GetCityByCoordinatesData = {
    lat: number;
    lon: number;
};

export type GetCityByCoordinatesResponse = string;

export type GetBannersResponse = Array<BannerEntities>;

export type GetFavoritesResponse = unknown;

export type ChangeFavoriteData = {
    cardId: number;
};

export type ChangeFavoriteResponse = unknown;

export type $OpenApiTs = {
    '/auth/register-sms': {
        post: {
            req: RegisterSmsData;
            res: {
                200: GetSmsTimerResponse;
                201: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/auth/login-sms': {
        post: {
            req: LoginSmsData;
            res: {
                200: GetSmsTimerResponse;
                201: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/auth/get-sms-timer': {
        get: {
            req: GetSmsTimerData;
            res: {
                200: GetSmsTimerResponse;
            };
        };
    };
    '/auth/verify-code': {
        post: {
            req: VerifyCodeData;
            res: {
                201: AuthResponse;
            };
        };
    };
    '/auth/refresh': {
        post: {
            res: {
                201: RefreshReponse;
            };
        };
    };
    '/auth/logout': {
        post: {
            res: {
                201: unknown;
            };
        };
    };
    '/users': {
        get: {
            res: {
                200: unknown;
            };
        };
        patch: {
            req: ChangeUserRoleData;
            res: {
                200: UserEntityWithoutPassword;
            };
        };
    };
    '/users/me': {
        get: {
            res: {
                200: UserEntityWithoutPassword;
            };
        };
    };
    '/users/{id}': {
        get: {
            req: GetByIdData;
            res: {
                200: UserEntityWithoutPassword;
            };
        };
    };
    '/companies': {
        post: {
            req: CreateData;
            res: {
                201: unknown;
            };
        };
        get: {
            res: {
                200: CompaniesResponse;
            };
        };
        delete: {
            res: {
                200: CompaniesResponse;
            };
        };
    };
    '/companies/my': {
        get: {
            res: {
                200: CompaniesResponse;
            };
        };
    };
    '/filters/{subCategoryId}': {
        get: {
            req: GetFiltersBySubCategoryIdData;
            res: {
                200: unknown;
            };
        };
    };
    '/shops/my': {
        get: {
            res: {
                200: ShopEntity;
            };
        };
    };
    '/shops': {
        get: {
            res: {
                200: Array<ShopEntityMinInfo>;
            };
        };
        post: {
            req: CreateShopData;
            res: {
                201: unknown;
            };
        };
        patch: {
            req: UpdateShopData;
            res: {
                200: unknown;
            };
        };
    };
    '/categories': {
        get: {
            req: GetAllCategoriesData;
            res: {
                200: Array<CategoryResponse>;
            };
        };
        post: {
            req: CreateCategoryData;
            res: {
                201: unknown;
            };
        };
        delete: {
            res: {
                200: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/categories/popular': {
        get: {
            res: {
                200: Array<PopularCategoriesResponse>;
            };
        };
    };
    '/categories/sub': {
        post: {
            req: CreateSubCategoryData;
            res: {
                201: unknown;
            };
        };
    };
    '/categories/sub/{id}': {
        get: {
            req: GetSubCategoryByIdData;
            res: {
                200: SubCategoryResponse;
            };
        };
    };
    '/categories/{id}': {
        delete: {
            req: DeleteCategoryByIdData;
            res: {
                200: unknown;
            };
        };
    };
    '/items/bulk/{sub_category_id}': {
        post: {
            req: CreateItemsBulkData;
            res: {
                201: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/items': {
        post: {
            req: CreateItemData;
            res: {
                201: unknown;
            };
        };
        get: {
            res: {
                200: Array<ItemsEntityMinInfo>;
            };
        };
    };
    '/items/my_shop': {
        get: {
            req: GetItemsByMyShopData;
            res: {
                200: Array<ItemsEntityMinInfoByShop>;
            };
        };
    };
    '/items/items/by-ids': {
        get: {
            req: GetItemsByIdsData;
            res: {
                200: Array<ItemsEntityBulkData>;
            };
        };
    };
    '/items/{id}': {
        patch: {
            req: UpdateItemData;
            res: {
                200: ItemsEntityMinInfo;
            };
        };
        get: {
            res: {
                200: unknown;
            };
        };
        delete: {
            req: DeleteByIdData;
            res: {
                200: unknown;
            };
        };
    };
    '/search/{query}': {
        get: {
            req: SearchData;
            res: {
                200: Array<SearchEntityResponse>;
            };
        };
    };
    '/file-upload/items': {
        post: {
            req: UploadItemsMediaData;
            res: {
                201: FilesResponse;
            };
        };
    };
    '/file-upload/banners': {
        post: {
            req: UploadBannerData;
            res: {
                201: unknown;
            };
        };
    };
    '/file-upload/shops/banner': {
        post: {
            req: UploadShopBannerData;
            res: {
                201: FileResponse;
            };
        };
    };
    '/file-upload/shops': {
        post: {
            req: UploadShopImagesData;
            res: {
                201: FileResponse;
            };
        };
    };
    '/file-upload/import/excel': {
        post: {
            req: ImportItemsExcelData;
            res: {
                201: Array<{
                    [key: string]: unknown;
                }>;
            };
        };
    };
    '/file-upload/export/excel': {
        post: {
            req: ExportItemsExcelData;
            res: {
                201: ExportExcelResponse;
            };
        };
    };
    '/basket': {
        get: {
            res: {
                200: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/basket/total': {
        get: {
            res: {
                200: number;
            };
        };
    };
    '/basket/{item_id}': {
        post: {
            req: AddItemToBasketData;
            res: {
                201: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/da-data': {
        get: {
            req: GetPartyData;
            res: {
                200: Array<OrganizationResponse>;
            };
        };
    };
    '/da-data/address': {
        get: {
            req: GetAddressData;
            res: {
                200: Array<AddressResponse>;
            };
        };
    };
    '/cards': {
        get: {
            req: GetAllCardsData;
            res: {
                200: Array<CardResponse>;
            };
        };
    };
    '/cards/new': {
        get: {
            res: {
                200: Array<CardResponse>;
            };
        };
    };
    '/brands': {
        post: {
            req: CreateBrandData;
            res: {
                201: unknown;
            };
        };
        get: {
            res: {
                200: unknown;
            };
        };
    };
    '/brands/{id}': {
        delete: {
            res: {
                200: unknown;
            };
        };
        get: {
            req: GetBrandByIdData;
            res: {
                200: unknown;
            };
        };
    };
    '/geolocation/{lat}/{lon}': {
        get: {
            req: GetCityByCoordinatesData;
            res: {
                200: string;
            };
        };
    };
    '/banners': {
        get: {
            res: {
                200: Array<BannerEntities>;
            };
        };
    };
    '/favorites': {
        get: {
            res: {
                200: unknown;
            };
        };
    };
    '/favorites/{cardId}': {
        post: {
            req: ChangeFavoriteData;
            res: {
                201: unknown;
            };
        };
    };
};