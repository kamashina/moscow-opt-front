// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { RegisterSmsData, RegisterSmsResponse, LoginSmsData, LoginSmsResponse, GetSmsTimerData, GetSmsTimerResponse2, VerifyCodeData, VerifyCodeResponse, RefreshTokenResponse, LogoutResponse, FindAllResponse, ChangeUserRoleData, ChangeUserRoleResponse, GetMeResponse, GetByIdData, GetByIdResponse, CreateData, CreateResponse, GetAllCompaniesResponse, DeleteMyCompanyResponse, GetMyCompanyResponse, GetFiltersBySubCategoryIdData, GetFiltersBySubCategoryIdResponse, GetMyShopResponse, GetAllShopsResponse, CreateShopData, CreateShopResponse, UpdateShopData, UpdateShopResponse, GetAllCategoriesData, GetAllCategoriesResponse, CreateCategoryData, CreateCategoryResponse, DeleteAllCategoriesResponse, GetPopularCategoriesResponse, CreateSubCategoryData, CreateSubCategoryResponse, GetSubCategoryByIdData, GetSubCategoryByIdResponse, DeleteCategoryByIdData, DeleteCategoryByIdResponse, CreateItemData, CreateItemResponse, GetAllItemsResponse, UpdateItemData, UpdateItemResponse, DeleteByIdData, DeleteByIdResponse, UploadItemsImagesData, UploadItemsImagesResponse, UploadBannerData, UploadBannerResponse, UploadShopImagesData, UploadShopImagesResponse, UploadItemsexcelData, UploadItemsexcelResponse, SearchData, SearchResponse, GetMyBasketResponse, GetTotalItemsInBasketResponse, AddItemToBasketData, AddItemToBasketResponse, GetPartyData, GetPartyResponse, GetAllCardsData, GetAllCardsResponse, CreateBrandData, CreateBrandResponse, GetBrandsResponse, DeleteBrandResponse, GetBrandByIdData, GetBrandByIdResponse, GetCityByCoordinatesData, GetCityByCoordinatesResponse, GetBannersResponse, GetFavoritesResponse, ChangeFavoriteData, ChangeFavoriteResponse } from './types.gen';

export class AuthService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns GetSmsTimerResponse
     * @returns unknown
     * @throws ApiError
     */
    public static registerSms(data: RegisterSmsData): CancelablePromise<RegisterSmsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/register-sms',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns GetSmsTimerResponse
     * @returns unknown
     * @throws ApiError
     */
    public static loginSms(data: LoginSmsData): CancelablePromise<LoginSmsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/login-sms',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.phone
     * @returns GetSmsTimerResponse
     * @throws ApiError
     */
    public static getSmsTimer(data: GetSmsTimerData): CancelablePromise<GetSmsTimerResponse2> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/auth/get-sms-timer',
            query: {
                phone: data.phone
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @returns AuthResponse
     * @throws ApiError
     */
    public static verifyCode(data: VerifyCodeData): CancelablePromise<VerifyCodeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/verify-code',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns AuthResponse
     * @returns AuthResponse
     * @throws ApiError
     */
    public static refreshToken(): CancelablePromise<RefreshTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/refresh'
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static logout(): CancelablePromise<LogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/logout'
        });
    }
    
}

export class UsersService {
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static findAll(): CancelablePromise<FindAllResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserEntityWithoutPassword
     * @throws ApiError
     */
    public static changeUserRole(data: ChangeUserRoleData): CancelablePromise<ChangeUserRoleResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/users',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns UserEntityWithoutPassword
     * @throws ApiError
     */
    public static getMe(): CancelablePromise<GetMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/me'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns UserEntityWithoutPassword
     * @throws ApiError
     */
    public static getById(data: GetByIdData): CancelablePromise<GetByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class CompaniesService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static create(data: CreateData): CancelablePromise<CreateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/companies',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns CompaniesResponse
     * @throws ApiError
     */
    public static getAllCompanies(): CancelablePromise<GetAllCompaniesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/companies'
        });
    }
    
    /**
     * @returns CompaniesResponse
     * @throws ApiError
     */
    public static deleteMyCompany(): CancelablePromise<DeleteMyCompanyResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/companies'
        });
    }
    
    /**
     * @returns CompaniesResponse
     * @throws ApiError
     */
    public static getMyCompany(): CancelablePromise<GetMyCompanyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/companies/my'
        });
    }
    
}

export class FiltersService {
    /**
     * @param data The data for the request.
     * @param data.subCategoryId
     * @returns unknown
     * @throws ApiError
     */
    public static getFiltersBySubCategoryId(data: GetFiltersBySubCategoryIdData): CancelablePromise<GetFiltersBySubCategoryIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/filters/{subCategoryId}',
            path: {
                subCategoryId: data.subCategoryId
            }
        });
    }
    
}

export class ShopService {
    /**
     * @returns ShopEntity
     * @throws ApiError
     */
    public static getMyShop(): CancelablePromise<GetMyShopResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/shops/my'
        });
    }
    
    /**
     * @returns ShopEntityMinInfo
     * @throws ApiError
     */
    public static getAllShops(): CancelablePromise<GetAllShopsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/shops'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static createShop(data: CreateShopData): CancelablePromise<CreateShopResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/shops',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static updateShop(data: UpdateShopData): CancelablePromise<UpdateShopResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/shops',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class CategoriesService {
    /**
     * @param data The data for the request.
     * @param data.isPopular
     * @returns CategoryResponse
     * @throws ApiError
     */
    public static getAllCategories(data: GetAllCategoriesData = {}): CancelablePromise<GetAllCategoriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/categories',
            query: {
                isPopular: data.isPopular
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static createCategory(data: CreateCategoryData): CancelablePromise<CreateCategoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/categories',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static deleteAllCategories(): CancelablePromise<DeleteAllCategoriesResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/categories'
        });
    }
    
    /**
     * @returns PopularCategoriesResponse
     * @throws ApiError
     */
    public static getPopularCategories(): CancelablePromise<GetPopularCategoriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/categories/popular'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.requestBody
     * @returns SubCategoryResponse
     * @throws ApiError
     */
    public static createSubCategory(data: CreateSubCategoryData): CancelablePromise<CreateSubCategoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/categories/sub',
            query: {
                parentId: data.parentId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns SubCategoryResponse
     * @throws ApiError
     */
    public static getSubCategoryById(data: GetSubCategoryByIdData): CancelablePromise<GetSubCategoryByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/categories/sub/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static deleteCategoryById(data: DeleteCategoryByIdData): CancelablePromise<DeleteCategoryByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/categories/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class ItemService {
    /**
     * @param data The data for the request.
     * @param data.subCategoryId
     * @param data.brandId
     * @param data.cardId
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static createItem(data: CreateItemData): CancelablePromise<CreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/items',
            query: {
                sub_category_id: data.subCategoryId,
                brand_id: data.brandId,
                card_id: data.cardId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns ItemsEntityMinInfo
     * @throws ApiError
     */
    public static getAllItems(): CancelablePromise<GetAllItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/items'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemsEntityMinInfo
     * @throws ApiError
     */
    public static updateItem(data: UpdateItemData): CancelablePromise<UpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static getById(): CancelablePromise<GetByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/items/{id}'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static deleteById(data: DeleteByIdData): CancelablePromise<DeleteByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/items/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class FileUploadService {
    /**
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown
     * @throws ApiError
     */
    public static uploadItemsImages(data: UploadItemsImagesData): CancelablePromise<UploadItemsImagesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/file-upload/items',
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown
     * @throws ApiError
     */
    public static uploadBanner(data: UploadBannerData): CancelablePromise<UploadBannerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/file-upload/banners',
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown
     * @throws ApiError
     */
    public static uploadShopImages(data: UploadShopImagesData): CancelablePromise<UploadShopImagesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/file-upload/shops',
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.subCategoryId
     * @param data.formData
     * @returns unknown
     * @throws ApiError
     */
    public static uploadItemsexcel(data: UploadItemsexcelData): CancelablePromise<UploadItemsexcelResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/file-upload/excel',
            query: {
                subCategoryId: data.subCategoryId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
}

export class MeilisearchService {
    /**
     * @param data The data for the request.
     * @param data.query
     * @returns SearchEntityResponse
     * @throws ApiError
     */
    public static search(data: SearchData = {}): CancelablePromise<SearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/search/{query}',
            path: {
                query: data.query
            }
        });
    }
    
}

export class BasketService {
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static getMyBasket(): CancelablePromise<GetMyBasketResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/basket'
        });
    }
    
    /**
     * @returns number
     * @throws ApiError
     */
    public static getTotalItemsInBasket(): CancelablePromise<GetTotalItemsInBasketResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/basket/total'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.itemId
     * @returns unknown
     * @throws ApiError
     */
    public static addItemToBasket(data: AddItemToBasketData): CancelablePromise<AddItemToBasketResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/basket/{item_id}',
            path: {
                item_id: data.itemId
            }
        });
    }
    
}

export class DaDataService {
    /**
     * @param data The data for the request.
     * @param data.query
     * @returns OrganizationResponse
     * @throws ApiError
     */
    public static getParty(data: GetPartyData): CancelablePromise<GetPartyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/da-data/inn',
            query: {
                query: data.query
            }
        });
    }
    
}

export class CardsService {
    /**
     * @param data The data for the request.
     * @param data.q
     * @returns CardResponse
     * @throws ApiError
     */
    public static getAllCards(data: GetAllCardsData = {}): CancelablePromise<GetAllCardsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/cards',
            query: {
                q: data.q
            }
        });
    }
    
}

export class BrandsService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static createBrand(data: CreateBrandData): CancelablePromise<CreateBrandResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/brands',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static getBrands(): CancelablePromise<GetBrandsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/brands'
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static deleteBrand(): CancelablePromise<DeleteBrandResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/brands/{id}'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static getBrandById(data: GetBrandByIdData): CancelablePromise<GetBrandByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/brands/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class GeolocationService {
    /**
     * @param data The data for the request.
     * @param data.lat
     * @param data.lon
     * @returns string
     * @throws ApiError
     */
    public static getCityByCoordinates(data: GetCityByCoordinatesData): CancelablePromise<GetCityByCoordinatesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/geolocation/{lat}/{lon}',
            path: {
                lat: data.lat,
                lon: data.lon
            }
        });
    }
    
}

export class BannersService {
    /**
     * @returns BannerEntities
     * @throws ApiError
     */
    public static getBanners(): CancelablePromise<GetBannersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/banners'
        });
    }
    
}

export class FavoritesService {
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static getFavorites(): CancelablePromise<GetFavoritesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/favorites'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.cardId
     * @returns unknown
     * @throws ApiError
     */
    public static changeFavorite(data: ChangeFavoriteData): CancelablePromise<ChangeFavoriteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/favorites/{cardId}',
            path: {
                cardId: data.cardId
            }
        });
    }
    
}