// This file is auto-generated by @hey-api/openapi-ts

export const $RegisterUserDto = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email'
        },
        password: {
            type: 'string',
            minLength: 6
        },
        phone: {
            type: 'string'
        },
        full_name: {
            type: 'string'
        }
    },
    required: ['email', 'password', 'phone', 'full_name']
} as const;

export const $GetSmsTimerResponse = {
    type: 'object',
    properties: {
        expiresIn: {
            type: 'number',
            readOnly: true
        },
        message: {
            type: 'string',
            readOnly: true
        }
    },
    required: ['expiresIn', 'message']
} as const;

export const $SendSmsDto = {
    type: 'object',
    properties: {
        phone: {
            type: 'string'
        }
    },
    required: ['phone']
} as const;

export const $VerifyCodeDto = {
    type: 'object',
    properties: {
        phone: {
            type: 'string'
        },
        code: {
            type: 'string'
        }
    },
    required: ['phone', 'code']
} as const;

export const $companyStatus = {
    type: 'string',
    enum: ['pending', 'approved', 'rejected', 'blocked']
} as const;

export const $VerifyCompanyResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        status: {
            allOf: [
                {
                    '$ref': '#/components/schemas/companyStatus'
                }
            ]
        }
    },
    required: ['id', 'name', 'status']
} as const;

export const $AuthResponse = {
    type: 'object',
    properties: {
        access_token: {
            type: 'string'
        },
        refresh_token: {
            type: 'string'
        },
        id: {
            type: 'number'
        },
        full_name: {
            type: 'string'
        },
        photo: {
            type: 'string'
        },
        role: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        company: {
            '$ref': '#/components/schemas/VerifyCompanyResponse'
        }
    },
    required: ['access_token', 'refresh_token', 'id', 'full_name', 'photo', 'role', 'email', 'phone', 'company']
} as const;

export const $RefreshReponse = {
    type: 'object',
    properties: {
        access_token: {
            type: 'string'
        },
        refresh_token: {
            type: 'string'
        }
    },
    required: ['access_token', 'refresh_token']
} as const;

export const $Role = {
    type: 'string',
    enum: ['user', 'seller']
} as const;

export const $UserEntityWithoutPassword = {
    type: 'object',
    properties: {
        role: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Role'
                }
            ]
        },
        id: {
            type: 'number'
        },
        full_name: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        photo: {
            type: 'string',
            nullable: true
        },
        shop: {
            type: 'object'
        },
        companies: {
            type: 'object'
        }
    },
    required: ['role', 'id', 'full_name', 'email', 'phone', 'photo']
} as const;

export const $UsersPatchDto = {
    type: 'object',
    properties: {
        role: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Role'
                }
            ]
        },
        photo: {
            type: 'string'
        },
        email: {
            type: 'string',
            format: 'email'
        },
        phone: {
            type: 'string'
        },
        full_name: {
            type: 'string'
        }
    },
    required: ['role', 'photo', 'email', 'phone', 'full_name']
} as const;

export const $type = {
    type: 'string',
    enum: ['INDIVIDUAL', 'LEGAL']
} as const;

export const $taxation = {
    type: 'string',
    enum: ['IE_without_VAT', 'IE_with_VAT', 'IE_Professional_Income_Tax', 'self_employed', 'company_with_VAT', 'company_without_VAT']
} as const;

export const $CompaniesDto = {
    type: 'object',
    properties: {
        type: {
            allOf: [
                {
                    '$ref': '#/components/schemas/type'
                }
            ]
        },
        taxation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/taxation'
                }
            ]
        },
        management_name: {
            type: 'string'
        },
        full_with_opf: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        itn: {
            type: 'string'
        },
        psrnsp: {
            type: 'string'
        },
        kpp: {
            type: 'string'
        }
    },
    required: ['type', 'taxation', 'management_name', 'full_with_opf', 'name', 'itn', 'psrnsp', 'kpp']
} as const;

export const $CompaniesResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        itn: {
            type: 'string'
        },
        psrnsp: {
            type: 'string'
        },
        kpp: {
            type: 'string'
        },
        type: {
            allOf: [
                {
                    '$ref': '#/components/schemas/type'
                }
            ]
        },
        taxation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/taxation'
                }
            ]
        },
        status: {
            allOf: [
                {
                    '$ref': '#/components/schemas/companyStatus'
                }
            ]
        }
    },
    required: ['id', 'name', 'itn', 'psrnsp', 'kpp', 'type', 'taxation', 'status']
} as const;

export const $rate = {
    type: 'string',
    enum: ['low', 'medium', 'hight']
} as const;

export const $ShopEntity = {
    type: 'object',
    properties: {
        rate: {
            allOf: [
                {
                    '$ref': '#/components/schemas/rate'
                }
            ]
        },
        address: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'number'
        },
        logo: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        company: {
            type: 'object',
            properties: {
                id: {
                    type: 'number'
                },
                name: {
                    type: 'string'
                }
            },
            required: ['id', 'name']
        }
    },
    required: ['rate', 'address', 'description', 'id', 'logo', 'name', 'company']
} as const;

export const $ShopEntityMinInfo = {
    type: 'object',
    properties: {
        rate: {
            allOf: [
                {
                    '$ref': '#/components/schemas/rate'
                }
            ]
        },
        address: {
            type: 'string'
        },
        logo: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'number'
        }
    },
    required: ['rate', 'address', 'logo', 'name', 'description', 'id']
} as const;

export const $CreateShopDto = {
    type: 'object',
    properties: {
        rate: {
            allOf: [
                {
                    '$ref': '#/components/schemas/rate'
                }
            ]
        },
        name: {
            type: 'string',
            minLength: 4
        },
        description: {
            type: 'string'
        },
        address: {
            type: 'string'
        },
        logo: {
            type: 'string'
        }
    },
    required: ['rate', 'name', 'address']
} as const;

export const $UpdateShopDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 4
        },
        description: {
            type: 'string'
        },
        address: {
            type: 'string'
        },
        logo: {
            type: 'string'
        }
    },
    required: ['name', 'address']
} as const;

export const $SubCategoryMinResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        seo: {
            type: 'string'
        }
    },
    required: ['id', 'name', 'seo']
} as const;

export const $CategoryResponse = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        logo: {
            type: 'string'
        },
        seo: {
            type: 'string'
        },
        isPopular: {
            type: 'boolean'
        },
        id: {
            type: 'number'
        },
        parentId: {
            type: 'number'
        },
        subCategories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubCategoryMinResponse'
            }
        }
    },
    required: ['name', 'logo', 'seo', 'isPopular', 'id', 'subCategories']
} as const;

export const $PopularCategoriesResponse = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        logo: {
            type: 'string'
        },
        seo: {
            type: 'string'
        },
        id: {
            type: 'number'
        }
    },
    required: ['name', 'logo', 'seo', 'id']
} as const;

export const $CreateCategoryDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 3
        },
        seo: {
            type: 'string'
        }
    },
    required: ['name', 'seo']
} as const;

export const $FieldsSchemaDto = {
    type: 'object',
    properties: {
        properties: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string'
                    },
                    enum: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                }
            }
        },
        required: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['properties', 'required']
} as const;

export const $CreateSubCategoryDto = {
    type: 'object',
    properties: {
        fieldsSchema: {
            '$ref': '#/components/schemas/FieldsSchemaDto'
        },
        name: {
            type: 'string',
            minLength: 3
        },
        excelTemplatePath: {
            type: 'string'
        },
        seo: {
            type: 'string'
        }
    },
    required: ['name', 'excelTemplatePath', 'seo']
} as const;

export const $SubCategoryResponse = {
    type: 'object',
    properties: {
        parentId: {
            type: 'number'
        },
        id: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        excelTemplatePath: {
            type: 'string'
        },
        fieldsSchema: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        seo: {
            type: 'string'
        }
    },
    required: ['parentId', 'id', 'name', 'excelTemplatePath', 'fieldsSchema', 'seo']
} as const;

export const $CreateItemDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 3
        },
        fields: {
            type: 'object'
        },
        countryOfOrigin: {
            type: 'string'
        },
        article: {
            type: 'number'
        },
        brand: {
            type: 'string'
        },
        box: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        price: {
            type: 'number'
        },
        sellerArticle: {
            type: 'string'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['name', 'fields', 'countryOfOrigin', 'article', 'brand', 'box', 'price', 'sellerArticle', 'images']
} as const;

export const $BasketOptions = {
    type: 'object',
    properties: {}
} as const;

export const $ItemsEntityMinInfo = {
    type: 'object',
    properties: {
        description: {
            type: 'string'
        },
        countryOfOrigin: {
            type: 'string'
        },
        basketOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BasketOptions'
            }
        },
        article: {
            type: 'number'
        },
        cardId: {
            type: 'number'
        },
        id: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['description', 'countryOfOrigin', 'basketOptions', 'article', 'cardId', 'id', 'name', 'images', 'createdAt']
} as const;

export const $UpdateItemDto = {
    type: 'object',
    properties: {
        description: {
            type: 'string'
        },
        basketOptions: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        seo: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        fields: {
            type: 'object'
        },
        countryOfOrigin: {
            type: 'string'
        },
        article: {
            type: 'number'
        },
        brand: {
            type: 'string'
        },
        box: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['description', 'basketOptions', 'seo', 'name', 'fields', 'countryOfOrigin', 'article', 'brand', 'box', 'images']
} as const;

export const $SuggestionType = {
    type: 'string',
    enum: ['card', 'category', 'subCategory', 'shop']
} as const;

export const $SearchEntityResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        suggestionType: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SuggestionType'
                }
            ]
        }
    },
    required: ['id', 'name', 'suggestionType']
} as const;

export const $OrganizationResponse = {
    type: 'object',
    properties: {
        type: {
            allOf: [
                {
                    '$ref': '#/components/schemas/type'
                }
            ]
        },
        name: {
            type: 'string'
        },
        itn: {
            type: 'string'
        },
        psrnsp: {
            type: 'string'
        },
        kpp: {
            type: 'string',
            nullable: true
        }
    },
    required: ['type', 'name', 'itn', 'psrnsp', 'kpp']
} as const;

export const $BoxResponseDto = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['box_single', 'box_characteristics']
        },
        options: {
            description: 'Опции коробки, структура зависит от типа box',
            oneOf: [
                {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        quantity: {
                            type: 'string'
                        }
                    }
                },
                {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        fields: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    name: {
                                        type: 'string'
                                    },
                                    quantity: {
                                        type: 'string'
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    required: ['type', 'options']
} as const;

export const $CardItemResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        countryOfOrigin: {
            type: 'string'
        },
        article: {
            type: 'number'
        },
        brand: {
            type: 'string'
        },
        box: {
            nullable: true,
            allOf: [
                {
                    '$ref': '#/components/schemas/BoxResponseDto'
                }
            ]
        },
        price: {
            type: 'number'
        },
        rating: {
            type: 'number'
        }
    },
    required: ['id', 'name', 'description', 'images', 'countryOfOrigin', 'article', 'brand', 'box', 'price', 'rating']
} as const;

export const $CardShopResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    },
    required: ['id', 'name']
} as const;

export const $CardResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        preview: {
            '$ref': '#/components/schemas/CardItemResponse'
        },
        shop: {
            '$ref': '#/components/schemas/CardShopResponse'
        },
        isFavorite: {
            type: 'boolean'
        }
    },
    required: ['id', 'preview', 'shop', 'isFavorite']
} as const;

export const $CreateBrandDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 3
        }
    },
    required: ['name']
} as const;

export const $BannerEntities = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        imagePath: {
            type: 'string'
        },
        routePath: {
            type: 'string'
        },
        seo: {
            type: 'string'
        }
    },
    required: ['id', 'imagePath', 'routePath', 'seo']
} as const;